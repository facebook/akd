// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/proto/inter-node.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct NodeLabel {
    // message fields
    len: ::std::option::Option<u32>,
    val: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeLabel {
    fn default() -> &'a NodeLabel {
        <NodeLabel as ::protobuf::Message>::default_instance()
    }
}

impl NodeLabel {
    pub fn new() -> NodeLabel {
        ::std::default::Default::default()
    }

    // required uint32 len = 1;


    pub fn get_len(&self) -> u32 {
        self.len.unwrap_or(0)
    }
    pub fn clear_len(&mut self) {
        self.len = ::std::option::Option::None;
    }

    pub fn has_len(&self) -> bool {
        self.len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_len(&mut self, v: u32) {
        self.len = ::std::option::Option::Some(v);
    }

    // required bytes val = 2;


    pub fn get_val(&self) -> &[u8] {
        match self.val.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_val(&mut self) {
        self.val.clear();
    }

    pub fn has_val(&self) -> bool {
        self.val.is_some()
    }

    // Param is passed by value, moved
    pub fn set_val(&mut self, v: ::std::vec::Vec<u8>) {
        self.val = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_val(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.val.is_none() {
            self.val.set_default();
        }
        self.val.as_mut().unwrap()
    }

    // Take field
    pub fn take_val(&mut self) -> ::std::vec::Vec<u8> {
        self.val.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for NodeLabel {
    fn is_initialized(&self) -> bool {
        if self.len.is_none() {
            return false;
        }
        if self.val.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.len = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.val)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.len {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.val.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.len {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.val.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeLabel {
        NodeLabel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "len",
                    |m: &NodeLabel| { &m.len },
                    |m: &mut NodeLabel| { &mut m.len },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "val",
                    |m: &NodeLabel| { &m.val },
                    |m: &mut NodeLabel| { &mut m.val },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NodeLabel>(
                    "NodeLabel",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeLabel {
        static mut instance: ::protobuf::lazy::Lazy<NodeLabel> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeLabel,
        };
        unsafe {
            instance.get(NodeLabel::new)
        }
    }
}

impl ::protobuf::Clear for NodeLabel {
    fn clear(&mut self) {
        self.len = ::std::option::Option::None;
        self.val.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeLabel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeLabel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Node {
    // message fields
    label: ::protobuf::SingularPtrField<NodeLabel>,
    hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node {
    fn default() -> &'a Node {
        <Node as ::protobuf::Message>::default_instance()
    }
}

impl Node {
    pub fn new() -> Node {
        ::std::default::Default::default()
    }

    // optional .NodeLabel label = 1;


    pub fn get_label(&self) -> &NodeLabel {
        self.label.as_ref().unwrap_or_else(|| NodeLabel::default_instance())
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: NodeLabel) {
        self.label = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut NodeLabel {
        if self.label.is_none() {
            self.label.set_default();
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> NodeLabel {
        self.label.take().unwrap_or_else(|| NodeLabel::new())
    }

    // optional bytes hash = 2;


    pub fn get_hash(&self) -> &[u8] {
        match self.hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    pub fn has_hash(&self) -> bool {
        self.hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.hash.is_none() {
            self.hash.set_default();
        }
        self.hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Node {
    fn is_initialized(&self) -> bool {
        for v in &self.label {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.label.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.label.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node {
        Node::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeLabel>>(
                    "label",
                    |m: &Node| { &m.label },
                    |m: &mut Node| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &Node| { &m.hash },
                    |m: &mut Node| { &mut m.hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Node>(
                    "Node",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Node {
        static mut instance: ::protobuf::lazy::Lazy<Node> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Node,
        };
        unsafe {
            instance.get(Node::new)
        }
    }
}

impl ::protobuf::Clear for Node {
    fn clear(&mut self) {
        self.label.clear();
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendOnlyProof {
    // message fields
    inserted: ::protobuf::RepeatedField<Node>,
    unchanged: ::protobuf::RepeatedField<Node>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppendOnlyProof {
    fn default() -> &'a AppendOnlyProof {
        <AppendOnlyProof as ::protobuf::Message>::default_instance()
    }
}

impl AppendOnlyProof {
    pub fn new() -> AppendOnlyProof {
        ::std::default::Default::default()
    }

    // repeated .Node inserted = 1;


    pub fn get_inserted(&self) -> &[Node] {
        &self.inserted
    }
    pub fn clear_inserted(&mut self) {
        self.inserted.clear();
    }

    // Param is passed by value, moved
    pub fn set_inserted(&mut self, v: ::protobuf::RepeatedField<Node>) {
        self.inserted = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inserted(&mut self) -> &mut ::protobuf::RepeatedField<Node> {
        &mut self.inserted
    }

    // Take field
    pub fn take_inserted(&mut self) -> ::protobuf::RepeatedField<Node> {
        ::std::mem::replace(&mut self.inserted, ::protobuf::RepeatedField::new())
    }

    // repeated .Node unchanged = 2;


    pub fn get_unchanged(&self) -> &[Node] {
        &self.unchanged
    }
    pub fn clear_unchanged(&mut self) {
        self.unchanged.clear();
    }

    // Param is passed by value, moved
    pub fn set_unchanged(&mut self, v: ::protobuf::RepeatedField<Node>) {
        self.unchanged = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unchanged(&mut self) -> &mut ::protobuf::RepeatedField<Node> {
        &mut self.unchanged
    }

    // Take field
    pub fn take_unchanged(&mut self) -> ::protobuf::RepeatedField<Node> {
        ::std::mem::replace(&mut self.unchanged, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AppendOnlyProof {
    fn is_initialized(&self) -> bool {
        for v in &self.inserted {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.unchanged {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inserted)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.unchanged)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.inserted {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.unchanged {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.inserted {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.unchanged {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendOnlyProof {
        AppendOnlyProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                    "inserted",
                    |m: &AppendOnlyProof| { &m.inserted },
                    |m: &mut AppendOnlyProof| { &mut m.inserted },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                    "unchanged",
                    |m: &AppendOnlyProof| { &m.unchanged },
                    |m: &mut AppendOnlyProof| { &mut m.unchanged },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AppendOnlyProof>(
                    "AppendOnlyProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AppendOnlyProof {
        static mut instance: ::protobuf::lazy::Lazy<AppendOnlyProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AppendOnlyProof,
        };
        unsafe {
            instance.get(AppendOnlyProof::new)
        }
    }
}

impl ::protobuf::Clear for AppendOnlyProof {
    fn clear(&mut self) {
        self.inserted.clear();
        self.unchanged.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendOnlyProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendOnlyProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeContact {
    // message fields
    ip_address: ::protobuf::SingularField<::std::string::String>,
    port: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeContact {
    fn default() -> &'a NodeContact {
        <NodeContact as ::protobuf::Message>::default_instance()
    }
}

impl NodeContact {
    pub fn new() -> NodeContact {
        ::std::default::Default::default()
    }

    // optional string ip_address = 1;


    pub fn get_ip_address(&self) -> &str {
        match self.ip_address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ip_address(&mut self) {
        self.ip_address.clear();
    }

    pub fn has_ip_address(&self) -> bool {
        self.ip_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_address(&mut self, v: ::std::string::String) {
        self.ip_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_address(&mut self) -> &mut ::std::string::String {
        if self.ip_address.is_none() {
            self.ip_address.set_default();
        }
        self.ip_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip_address(&mut self) -> ::std::string::String {
        self.ip_address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 port = 2;


    pub fn get_port(&self) -> u32 {
        self.port.unwrap_or(0)
    }
    pub fn clear_port(&mut self) {
        self.port = ::std::option::Option::None;
    }

    pub fn has_port(&self) -> bool {
        self.port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for NodeContact {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ip_address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ip_address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.port {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ip_address.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.port {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeContact {
        NodeContact::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ip_address",
                    |m: &NodeContact| { &m.ip_address },
                    |m: &mut NodeContact| { &mut m.ip_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "port",
                    |m: &NodeContact| { &m.port },
                    |m: &mut NodeContact| { &mut m.port },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NodeContact>(
                    "NodeContact",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeContact {
        static mut instance: ::protobuf::lazy::Lazy<NodeContact> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeContact,
        };
        unsafe {
            instance.get(NodeContact::new)
        }
    }
}

impl ::protobuf::Clear for NodeContact {
    fn clear(&mut self) {
        self.ip_address.clear();
        self.port = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeContact {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeContact {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerifyRequest {
    // message fields
    proof: ::protobuf::SingularPtrField<AppendOnlyProof>,
    previous_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    new_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    epoch: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerifyRequest {
    fn default() -> &'a VerifyRequest {
        <VerifyRequest as ::protobuf::Message>::default_instance()
    }
}

impl VerifyRequest {
    pub fn new() -> VerifyRequest {
        ::std::default::Default::default()
    }

    // optional .AppendOnlyProof proof = 1;


    pub fn get_proof(&self) -> &AppendOnlyProof {
        self.proof.as_ref().unwrap_or_else(|| AppendOnlyProof::default_instance())
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    pub fn has_proof(&self) -> bool {
        self.proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: AppendOnlyProof) {
        self.proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut AppendOnlyProof {
        if self.proof.is_none() {
            self.proof.set_default();
        }
        self.proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof(&mut self) -> AppendOnlyProof {
        self.proof.take().unwrap_or_else(|| AppendOnlyProof::new())
    }

    // optional bytes previous_hash = 2;


    pub fn get_previous_hash(&self) -> &[u8] {
        match self.previous_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_previous_hash(&mut self) {
        self.previous_hash.clear();
    }

    pub fn has_previous_hash(&self) -> bool {
        self.previous_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_previous_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.previous_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.previous_hash.is_none() {
            self.previous_hash.set_default();
        }
        self.previous_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_previous_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.previous_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes new_hash = 3;


    pub fn get_new_hash(&self) -> &[u8] {
        match self.new_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_new_hash(&mut self) {
        self.new_hash.clear();
    }

    pub fn has_new_hash(&self) -> bool {
        self.new_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.new_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.new_hash.is_none() {
            self.new_hash.set_default();
        }
        self.new_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.new_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 epoch = 4;


    pub fn get_epoch(&self) -> u64 {
        self.epoch.unwrap_or(0)
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = ::std::option::Option::None;
    }

    pub fn has_epoch(&self) -> bool {
        self.epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for VerifyRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.previous_hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.new_hash)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.previous_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.new_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.epoch {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.proof.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.previous_hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.new_hash.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(v) = self.epoch {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerifyRequest {
        VerifyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AppendOnlyProof>>(
                    "proof",
                    |m: &VerifyRequest| { &m.proof },
                    |m: &mut VerifyRequest| { &mut m.proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "previous_hash",
                    |m: &VerifyRequest| { &m.previous_hash },
                    |m: &mut VerifyRequest| { &mut m.previous_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "new_hash",
                    |m: &VerifyRequest| { &m.new_hash },
                    |m: &mut VerifyRequest| { &mut m.new_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "epoch",
                    |m: &VerifyRequest| { &m.epoch },
                    |m: &mut VerifyRequest| { &mut m.epoch },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VerifyRequest>(
                    "VerifyRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VerifyRequest {
        static mut instance: ::protobuf::lazy::Lazy<VerifyRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VerifyRequest,
        };
        unsafe {
            instance.get(VerifyRequest::new)
        }
    }
}

impl ::protobuf::Clear for VerifyRequest {
    fn clear(&mut self) {
        self.proof.clear();
        self.previous_hash.clear();
        self.new_hash.clear();
        self.epoch = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerifyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerifyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerifyResponse {
    // message fields
    encrypted_quorum_key_shard: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    verified_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerifyResponse {
    fn default() -> &'a VerifyResponse {
        <VerifyResponse as ::protobuf::Message>::default_instance()
    }
}

impl VerifyResponse {
    pub fn new() -> VerifyResponse {
        ::std::default::Default::default()
    }

    // optional bytes encrypted_quorum_key_shard = 1;


    pub fn get_encrypted_quorum_key_shard(&self) -> &[u8] {
        match self.encrypted_quorum_key_shard.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_encrypted_quorum_key_shard(&mut self) {
        self.encrypted_quorum_key_shard.clear();
    }

    pub fn has_encrypted_quorum_key_shard(&self) -> bool {
        self.encrypted_quorum_key_shard.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_quorum_key_shard(&mut self, v: ::std::vec::Vec<u8>) {
        self.encrypted_quorum_key_shard = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_quorum_key_shard(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encrypted_quorum_key_shard.is_none() {
            self.encrypted_quorum_key_shard.set_default();
        }
        self.encrypted_quorum_key_shard.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_quorum_key_shard(&mut self) -> ::std::vec::Vec<u8> {
        self.encrypted_quorum_key_shard.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes verified_hash = 2;


    pub fn get_verified_hash(&self) -> &[u8] {
        match self.verified_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_verified_hash(&mut self) {
        self.verified_hash.clear();
    }

    pub fn has_verified_hash(&self) -> bool {
        self.verified_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_verified_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.verified_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_verified_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.verified_hash.is_none() {
            self.verified_hash.set_default();
        }
        self.verified_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_verified_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.verified_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for VerifyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.encrypted_quorum_key_shard)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.verified_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.encrypted_quorum_key_shard.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.verified_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.encrypted_quorum_key_shard.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.verified_hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerifyResponse {
        VerifyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "encrypted_quorum_key_shard",
                    |m: &VerifyResponse| { &m.encrypted_quorum_key_shard },
                    |m: &mut VerifyResponse| { &mut m.encrypted_quorum_key_shard },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "verified_hash",
                    |m: &VerifyResponse| { &m.verified_hash },
                    |m: &mut VerifyResponse| { &mut m.verified_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VerifyResponse>(
                    "VerifyResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VerifyResponse {
        static mut instance: ::protobuf::lazy::Lazy<VerifyResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VerifyResponse,
        };
        unsafe {
            instance.get(VerifyResponse::new)
        }
    }
}

impl ::protobuf::Clear for VerifyResponse {
    fn clear(&mut self) {
        self.encrypted_quorum_key_shard.clear();
        self.verified_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerifyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerifyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddNodeInit {
    // message fields
    public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    contact_information: ::protobuf::SingularPtrField<NodeContact>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddNodeInit {
    fn default() -> &'a AddNodeInit {
        <AddNodeInit as ::protobuf::Message>::default_instance()
    }
}

impl AddNodeInit {
    pub fn new() -> AddNodeInit {
        ::std::default::Default::default()
    }

    // optional bytes public_key = 1;


    pub fn get_public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .NodeContact contact_information = 2;


    pub fn get_contact_information(&self) -> &NodeContact {
        self.contact_information.as_ref().unwrap_or_else(|| NodeContact::default_instance())
    }
    pub fn clear_contact_information(&mut self) {
        self.contact_information.clear();
    }

    pub fn has_contact_information(&self) -> bool {
        self.contact_information.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contact_information(&mut self, v: NodeContact) {
        self.contact_information = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contact_information(&mut self) -> &mut NodeContact {
        if self.contact_information.is_none() {
            self.contact_information.set_default();
        }
        self.contact_information.as_mut().unwrap()
    }

    // Take field
    pub fn take_contact_information(&mut self) -> NodeContact {
        self.contact_information.take().unwrap_or_else(|| NodeContact::new())
    }
}

impl ::protobuf::Message for AddNodeInit {
    fn is_initialized(&self) -> bool {
        for v in &self.contact_information {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contact_information)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.contact_information.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.contact_information.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddNodeInit {
        AddNodeInit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "public_key",
                    |m: &AddNodeInit| { &m.public_key },
                    |m: &mut AddNodeInit| { &mut m.public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeContact>>(
                    "contact_information",
                    |m: &AddNodeInit| { &m.contact_information },
                    |m: &mut AddNodeInit| { &mut m.contact_information },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddNodeInit>(
                    "AddNodeInit",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddNodeInit {
        static mut instance: ::protobuf::lazy::Lazy<AddNodeInit> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddNodeInit,
        };
        unsafe {
            instance.get(AddNodeInit::new)
        }
    }
}

impl ::protobuf::Clear for AddNodeInit {
    fn clear(&mut self) {
        self.public_key.clear();
        self.contact_information.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddNodeInit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddNodeInit {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddNodeTestResult {
    // message fields
    encrypted_quorum_key_shard: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    contact_information: ::protobuf::SingularPtrField<NodeContact>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddNodeTestResult {
    fn default() -> &'a AddNodeTestResult {
        <AddNodeTestResult as ::protobuf::Message>::default_instance()
    }
}

impl AddNodeTestResult {
    pub fn new() -> AddNodeTestResult {
        ::std::default::Default::default()
    }

    // optional bytes encrypted_quorum_key_shard = 1;


    pub fn get_encrypted_quorum_key_shard(&self) -> &[u8] {
        match self.encrypted_quorum_key_shard.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_encrypted_quorum_key_shard(&mut self) {
        self.encrypted_quorum_key_shard.clear();
    }

    pub fn has_encrypted_quorum_key_shard(&self) -> bool {
        self.encrypted_quorum_key_shard.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_quorum_key_shard(&mut self, v: ::std::vec::Vec<u8>) {
        self.encrypted_quorum_key_shard = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_quorum_key_shard(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encrypted_quorum_key_shard.is_none() {
            self.encrypted_quorum_key_shard.set_default();
        }
        self.encrypted_quorum_key_shard.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_quorum_key_shard(&mut self) -> ::std::vec::Vec<u8> {
        self.encrypted_quorum_key_shard.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .NodeContact contact_information = 2;


    pub fn get_contact_information(&self) -> &NodeContact {
        self.contact_information.as_ref().unwrap_or_else(|| NodeContact::default_instance())
    }
    pub fn clear_contact_information(&mut self) {
        self.contact_information.clear();
    }

    pub fn has_contact_information(&self) -> bool {
        self.contact_information.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contact_information(&mut self, v: NodeContact) {
        self.contact_information = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contact_information(&mut self) -> &mut NodeContact {
        if self.contact_information.is_none() {
            self.contact_information.set_default();
        }
        self.contact_information.as_mut().unwrap()
    }

    // Take field
    pub fn take_contact_information(&mut self) -> NodeContact {
        self.contact_information.take().unwrap_or_else(|| NodeContact::new())
    }
}

impl ::protobuf::Message for AddNodeTestResult {
    fn is_initialized(&self) -> bool {
        for v in &self.contact_information {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.encrypted_quorum_key_shard)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contact_information)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.encrypted_quorum_key_shard.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.contact_information.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.encrypted_quorum_key_shard.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.contact_information.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddNodeTestResult {
        AddNodeTestResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "encrypted_quorum_key_shard",
                    |m: &AddNodeTestResult| { &m.encrypted_quorum_key_shard },
                    |m: &mut AddNodeTestResult| { &mut m.encrypted_quorum_key_shard },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeContact>>(
                    "contact_information",
                    |m: &AddNodeTestResult| { &m.contact_information },
                    |m: &mut AddNodeTestResult| { &mut m.contact_information },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddNodeTestResult>(
                    "AddNodeTestResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddNodeTestResult {
        static mut instance: ::protobuf::lazy::Lazy<AddNodeTestResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddNodeTestResult,
        };
        unsafe {
            instance.get(AddNodeTestResult::new)
        }
    }
}

impl ::protobuf::Clear for AddNodeTestResult {
    fn clear(&mut self) {
        self.encrypted_quorum_key_shard.clear();
        self.contact_information.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddNodeTestResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddNodeTestResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddNodeResult {
    // message fields
    encrypted_quorum_key_shard: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    node_id: ::std::option::Option<u64>,
    public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    contact_information: ::protobuf::SingularPtrField<NodeContact>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddNodeResult {
    fn default() -> &'a AddNodeResult {
        <AddNodeResult as ::protobuf::Message>::default_instance()
    }
}

impl AddNodeResult {
    pub fn new() -> AddNodeResult {
        ::std::default::Default::default()
    }

    // optional bytes encrypted_quorum_key_shard = 1;


    pub fn get_encrypted_quorum_key_shard(&self) -> &[u8] {
        match self.encrypted_quorum_key_shard.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_encrypted_quorum_key_shard(&mut self) {
        self.encrypted_quorum_key_shard.clear();
    }

    pub fn has_encrypted_quorum_key_shard(&self) -> bool {
        self.encrypted_quorum_key_shard.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_quorum_key_shard(&mut self, v: ::std::vec::Vec<u8>) {
        self.encrypted_quorum_key_shard = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_quorum_key_shard(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encrypted_quorum_key_shard.is_none() {
            self.encrypted_quorum_key_shard.set_default();
        }
        self.encrypted_quorum_key_shard.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_quorum_key_shard(&mut self) -> ::std::vec::Vec<u8> {
        self.encrypted_quorum_key_shard.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 node_id = 2;


    pub fn get_node_id(&self) -> u64 {
        self.node_id.unwrap_or(0)
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = ::std::option::Option::None;
    }

    pub fn has_node_id(&self) -> bool {
        self.node_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = ::std::option::Option::Some(v);
    }

    // optional bytes public_key = 3;


    pub fn get_public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .NodeContact contact_information = 4;


    pub fn get_contact_information(&self) -> &NodeContact {
        self.contact_information.as_ref().unwrap_or_else(|| NodeContact::default_instance())
    }
    pub fn clear_contact_information(&mut self) {
        self.contact_information.clear();
    }

    pub fn has_contact_information(&self) -> bool {
        self.contact_information.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contact_information(&mut self, v: NodeContact) {
        self.contact_information = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contact_information(&mut self) -> &mut NodeContact {
        if self.contact_information.is_none() {
            self.contact_information.set_default();
        }
        self.contact_information.as_mut().unwrap()
    }

    // Take field
    pub fn take_contact_information(&mut self) -> NodeContact {
        self.contact_information.take().unwrap_or_else(|| NodeContact::new())
    }
}

impl ::protobuf::Message for AddNodeResult {
    fn is_initialized(&self) -> bool {
        for v in &self.contact_information {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.encrypted_quorum_key_shard)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contact_information)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.encrypted_quorum_key_shard.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.node_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.contact_information.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.encrypted_quorum_key_shard.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.node_id {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.contact_information.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddNodeResult {
        AddNodeResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "encrypted_quorum_key_shard",
                    |m: &AddNodeResult| { &m.encrypted_quorum_key_shard },
                    |m: &mut AddNodeResult| { &mut m.encrypted_quorum_key_shard },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "node_id",
                    |m: &AddNodeResult| { &m.node_id },
                    |m: &mut AddNodeResult| { &mut m.node_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "public_key",
                    |m: &AddNodeResult| { &m.public_key },
                    |m: &mut AddNodeResult| { &mut m.public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeContact>>(
                    "contact_information",
                    |m: &AddNodeResult| { &m.contact_information },
                    |m: &mut AddNodeResult| { &mut m.contact_information },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddNodeResult>(
                    "AddNodeResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddNodeResult {
        static mut instance: ::protobuf::lazy::Lazy<AddNodeResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddNodeResult,
        };
        unsafe {
            instance.get(AddNodeResult::new)
        }
    }
}

impl ::protobuf::Clear for AddNodeResult {
    fn clear(&mut self) {
        self.encrypted_quorum_key_shard.clear();
        self.node_id = ::std::option::Option::None;
        self.public_key.clear();
        self.contact_information.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddNodeResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddNodeResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NewNodeTest {
    // message fields
    requesters_public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    previous_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    new_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    test_proof: ::protobuf::SingularPtrField<AppendOnlyProof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NewNodeTest {
    fn default() -> &'a NewNodeTest {
        <NewNodeTest as ::protobuf::Message>::default_instance()
    }
}

impl NewNodeTest {
    pub fn new() -> NewNodeTest {
        ::std::default::Default::default()
    }

    // optional bytes requesters_public_key = 1;


    pub fn get_requesters_public_key(&self) -> &[u8] {
        match self.requesters_public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_requesters_public_key(&mut self) {
        self.requesters_public_key.clear();
    }

    pub fn has_requesters_public_key(&self) -> bool {
        self.requesters_public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requesters_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.requesters_public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requesters_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.requesters_public_key.is_none() {
            self.requesters_public_key.set_default();
        }
        self.requesters_public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_requesters_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.requesters_public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes previous_hash = 2;


    pub fn get_previous_hash(&self) -> &[u8] {
        match self.previous_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_previous_hash(&mut self) {
        self.previous_hash.clear();
    }

    pub fn has_previous_hash(&self) -> bool {
        self.previous_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_previous_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.previous_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.previous_hash.is_none() {
            self.previous_hash.set_default();
        }
        self.previous_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_previous_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.previous_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes new_hash = 3;


    pub fn get_new_hash(&self) -> &[u8] {
        match self.new_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_new_hash(&mut self) {
        self.new_hash.clear();
    }

    pub fn has_new_hash(&self) -> bool {
        self.new_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.new_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.new_hash.is_none() {
            self.new_hash.set_default();
        }
        self.new_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.new_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .AppendOnlyProof test_proof = 4;


    pub fn get_test_proof(&self) -> &AppendOnlyProof {
        self.test_proof.as_ref().unwrap_or_else(|| AppendOnlyProof::default_instance())
    }
    pub fn clear_test_proof(&mut self) {
        self.test_proof.clear();
    }

    pub fn has_test_proof(&self) -> bool {
        self.test_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_test_proof(&mut self, v: AppendOnlyProof) {
        self.test_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_test_proof(&mut self) -> &mut AppendOnlyProof {
        if self.test_proof.is_none() {
            self.test_proof.set_default();
        }
        self.test_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_test_proof(&mut self) -> AppendOnlyProof {
        self.test_proof.take().unwrap_or_else(|| AppendOnlyProof::new())
    }
}

impl ::protobuf::Message for NewNodeTest {
    fn is_initialized(&self) -> bool {
        for v in &self.test_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.requesters_public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.previous_hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.new_hash)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.test_proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.requesters_public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.previous_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.new_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.test_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.requesters_public_key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.previous_hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.new_hash.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.test_proof.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NewNodeTest {
        NewNodeTest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "requesters_public_key",
                    |m: &NewNodeTest| { &m.requesters_public_key },
                    |m: &mut NewNodeTest| { &mut m.requesters_public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "previous_hash",
                    |m: &NewNodeTest| { &m.previous_hash },
                    |m: &mut NewNodeTest| { &mut m.previous_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "new_hash",
                    |m: &NewNodeTest| { &m.new_hash },
                    |m: &mut NewNodeTest| { &mut m.new_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AppendOnlyProof>>(
                    "test_proof",
                    |m: &NewNodeTest| { &m.test_proof },
                    |m: &mut NewNodeTest| { &mut m.test_proof },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NewNodeTest>(
                    "NewNodeTest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NewNodeTest {
        static mut instance: ::protobuf::lazy::Lazy<NewNodeTest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NewNodeTest,
        };
        unsafe {
            instance.get(NewNodeTest::new)
        }
    }
}

impl ::protobuf::Clear for NewNodeTest {
    fn clear(&mut self) {
        self.requesters_public_key.clear();
        self.previous_hash.clear();
        self.new_hash.clear();
        self.test_proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NewNodeTest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NewNodeTest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NewNodeTestResult {
    // message fields
    test_pass: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NewNodeTestResult {
    fn default() -> &'a NewNodeTestResult {
        <NewNodeTestResult as ::protobuf::Message>::default_instance()
    }
}

impl NewNodeTestResult {
    pub fn new() -> NewNodeTestResult {
        ::std::default::Default::default()
    }

    // optional bool test_pass = 1;


    pub fn get_test_pass(&self) -> bool {
        self.test_pass.unwrap_or(false)
    }
    pub fn clear_test_pass(&mut self) {
        self.test_pass = ::std::option::Option::None;
    }

    pub fn has_test_pass(&self) -> bool {
        self.test_pass.is_some()
    }

    // Param is passed by value, moved
    pub fn set_test_pass(&mut self, v: bool) {
        self.test_pass = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for NewNodeTestResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.test_pass = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.test_pass {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.test_pass {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NewNodeTestResult {
        NewNodeTestResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "test_pass",
                    |m: &NewNodeTestResult| { &m.test_pass },
                    |m: &mut NewNodeTestResult| { &mut m.test_pass },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NewNodeTestResult>(
                    "NewNodeTestResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NewNodeTestResult {
        static mut instance: ::protobuf::lazy::Lazy<NewNodeTestResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NewNodeTestResult,
        };
        unsafe {
            instance.get(NewNodeTestResult::new)
        }
    }
}

impl ::protobuf::Clear for NewNodeTestResult {
    fn clear(&mut self) {
        self.test_pass = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NewNodeTestResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NewNodeTestResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoveNodeInit {
    // message fields
    node_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveNodeInit {
    fn default() -> &'a RemoveNodeInit {
        <RemoveNodeInit as ::protobuf::Message>::default_instance()
    }
}

impl RemoveNodeInit {
    pub fn new() -> RemoveNodeInit {
        ::std::default::Default::default()
    }

    // optional uint64 node_id = 1;


    pub fn get_node_id(&self) -> u64 {
        self.node_id.unwrap_or(0)
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = ::std::option::Option::None;
    }

    pub fn has_node_id(&self) -> bool {
        self.node_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RemoveNodeInit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.node_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.node_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveNodeInit {
        RemoveNodeInit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "node_id",
                    |m: &RemoveNodeInit| { &m.node_id },
                    |m: &mut RemoveNodeInit| { &mut m.node_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RemoveNodeInit>(
                    "RemoveNodeInit",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RemoveNodeInit {
        static mut instance: ::protobuf::lazy::Lazy<RemoveNodeInit> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RemoveNodeInit,
        };
        unsafe {
            instance.get(RemoveNodeInit::new)
        }
    }
}

impl ::protobuf::Clear for RemoveNodeInit {
    fn clear(&mut self) {
        self.node_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveNodeInit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveNodeInit {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoveNodeTestResult {
    // message fields
    encrypted_quorum_key_shard: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    node_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveNodeTestResult {
    fn default() -> &'a RemoveNodeTestResult {
        <RemoveNodeTestResult as ::protobuf::Message>::default_instance()
    }
}

impl RemoveNodeTestResult {
    pub fn new() -> RemoveNodeTestResult {
        ::std::default::Default::default()
    }

    // optional bytes encrypted_quorum_key_shard = 1;


    pub fn get_encrypted_quorum_key_shard(&self) -> &[u8] {
        match self.encrypted_quorum_key_shard.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_encrypted_quorum_key_shard(&mut self) {
        self.encrypted_quorum_key_shard.clear();
    }

    pub fn has_encrypted_quorum_key_shard(&self) -> bool {
        self.encrypted_quorum_key_shard.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_quorum_key_shard(&mut self, v: ::std::vec::Vec<u8>) {
        self.encrypted_quorum_key_shard = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_quorum_key_shard(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encrypted_quorum_key_shard.is_none() {
            self.encrypted_quorum_key_shard.set_default();
        }
        self.encrypted_quorum_key_shard.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_quorum_key_shard(&mut self) -> ::std::vec::Vec<u8> {
        self.encrypted_quorum_key_shard.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 node_id = 2;


    pub fn get_node_id(&self) -> u64 {
        self.node_id.unwrap_or(0)
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = ::std::option::Option::None;
    }

    pub fn has_node_id(&self) -> bool {
        self.node_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RemoveNodeTestResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.encrypted_quorum_key_shard)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.encrypted_quorum_key_shard.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.node_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.encrypted_quorum_key_shard.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.node_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveNodeTestResult {
        RemoveNodeTestResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "encrypted_quorum_key_shard",
                    |m: &RemoveNodeTestResult| { &m.encrypted_quorum_key_shard },
                    |m: &mut RemoveNodeTestResult| { &mut m.encrypted_quorum_key_shard },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "node_id",
                    |m: &RemoveNodeTestResult| { &m.node_id },
                    |m: &mut RemoveNodeTestResult| { &mut m.node_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RemoveNodeTestResult>(
                    "RemoveNodeTestResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RemoveNodeTestResult {
        static mut instance: ::protobuf::lazy::Lazy<RemoveNodeTestResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RemoveNodeTestResult,
        };
        unsafe {
            instance.get(RemoveNodeTestResult::new)
        }
    }
}

impl ::protobuf::Clear for RemoveNodeTestResult {
    fn clear(&mut self) {
        self.encrypted_quorum_key_shard.clear();
        self.node_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveNodeTestResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveNodeTestResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoveNodeResult {
    // message fields
    encrypted_quorum_key_shard: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    node_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveNodeResult {
    fn default() -> &'a RemoveNodeResult {
        <RemoveNodeResult as ::protobuf::Message>::default_instance()
    }
}

impl RemoveNodeResult {
    pub fn new() -> RemoveNodeResult {
        ::std::default::Default::default()
    }

    // optional bytes encrypted_quorum_key_shard = 1;


    pub fn get_encrypted_quorum_key_shard(&self) -> &[u8] {
        match self.encrypted_quorum_key_shard.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_encrypted_quorum_key_shard(&mut self) {
        self.encrypted_quorum_key_shard.clear();
    }

    pub fn has_encrypted_quorum_key_shard(&self) -> bool {
        self.encrypted_quorum_key_shard.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_quorum_key_shard(&mut self, v: ::std::vec::Vec<u8>) {
        self.encrypted_quorum_key_shard = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_quorum_key_shard(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encrypted_quorum_key_shard.is_none() {
            self.encrypted_quorum_key_shard.set_default();
        }
        self.encrypted_quorum_key_shard.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_quorum_key_shard(&mut self) -> ::std::vec::Vec<u8> {
        self.encrypted_quorum_key_shard.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 node_id = 2;


    pub fn get_node_id(&self) -> u64 {
        self.node_id.unwrap_or(0)
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = ::std::option::Option::None;
    }

    pub fn has_node_id(&self) -> bool {
        self.node_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RemoveNodeResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.encrypted_quorum_key_shard)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.encrypted_quorum_key_shard.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.node_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.encrypted_quorum_key_shard.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.node_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveNodeResult {
        RemoveNodeResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "encrypted_quorum_key_shard",
                    |m: &RemoveNodeResult| { &m.encrypted_quorum_key_shard },
                    |m: &mut RemoveNodeResult| { &mut m.encrypted_quorum_key_shard },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "node_id",
                    |m: &RemoveNodeResult| { &m.node_id },
                    |m: &mut RemoveNodeResult| { &mut m.node_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RemoveNodeResult>(
                    "RemoveNodeResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RemoveNodeResult {
        static mut instance: ::protobuf::lazy::Lazy<RemoveNodeResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RemoveNodeResult,
        };
        unsafe {
            instance.get(RemoveNodeResult::new)
        }
    }
}

impl ::protobuf::Clear for RemoveNodeResult {
    fn clear(&mut self) {
        self.encrypted_quorum_key_shard.clear();
        self.node_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveNodeResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveNodeResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InterNodeAck {
    // message fields
    ok: ::std::option::Option<bool>,
    err: ::protobuf::SingularField<::std::string::String>,
    remove_result: ::protobuf::SingularPtrField<RemoveNodeResult>,
    add_result: ::protobuf::SingularPtrField<AddNodeResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InterNodeAck {
    fn default() -> &'a InterNodeAck {
        <InterNodeAck as ::protobuf::Message>::default_instance()
    }
}

impl InterNodeAck {
    pub fn new() -> InterNodeAck {
        ::std::default::Default::default()
    }

    // optional bool ok = 1;


    pub fn get_ok(&self) -> bool {
        self.ok.unwrap_or(false)
    }
    pub fn clear_ok(&mut self) {
        self.ok = ::std::option::Option::None;
    }

    pub fn has_ok(&self) -> bool {
        self.ok.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ok(&mut self, v: bool) {
        self.ok = ::std::option::Option::Some(v);
    }

    // optional string err = 2;


    pub fn get_err(&self) -> &str {
        match self.err.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_err(&mut self) {
        self.err.clear();
    }

    pub fn has_err(&self) -> bool {
        self.err.is_some()
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: ::std::string::String) {
        self.err = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err(&mut self) -> &mut ::std::string::String {
        if self.err.is_none() {
            self.err.set_default();
        }
        self.err.as_mut().unwrap()
    }

    // Take field
    pub fn take_err(&mut self) -> ::std::string::String {
        self.err.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .RemoveNodeResult remove_result = 3;


    pub fn get_remove_result(&self) -> &RemoveNodeResult {
        self.remove_result.as_ref().unwrap_or_else(|| RemoveNodeResult::default_instance())
    }
    pub fn clear_remove_result(&mut self) {
        self.remove_result.clear();
    }

    pub fn has_remove_result(&self) -> bool {
        self.remove_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remove_result(&mut self, v: RemoveNodeResult) {
        self.remove_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_remove_result(&mut self) -> &mut RemoveNodeResult {
        if self.remove_result.is_none() {
            self.remove_result.set_default();
        }
        self.remove_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_remove_result(&mut self) -> RemoveNodeResult {
        self.remove_result.take().unwrap_or_else(|| RemoveNodeResult::new())
    }

    // optional .AddNodeResult add_result = 4;


    pub fn get_add_result(&self) -> &AddNodeResult {
        self.add_result.as_ref().unwrap_or_else(|| AddNodeResult::default_instance())
    }
    pub fn clear_add_result(&mut self) {
        self.add_result.clear();
    }

    pub fn has_add_result(&self) -> bool {
        self.add_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_add_result(&mut self, v: AddNodeResult) {
        self.add_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_result(&mut self) -> &mut AddNodeResult {
        if self.add_result.is_none() {
            self.add_result.set_default();
        }
        self.add_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_add_result(&mut self) -> AddNodeResult {
        self.add_result.take().unwrap_or_else(|| AddNodeResult::new())
    }
}

impl ::protobuf::Message for InterNodeAck {
    fn is_initialized(&self) -> bool {
        for v in &self.remove_result {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.add_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ok = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.err)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.remove_result)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.add_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.ok {
            my_size += 2;
        }
        if let Some(ref v) = self.err.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.remove_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.add_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.ok {
            os.write_bool(1, v)?;
        }
        if let Some(ref v) = self.err.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.remove_result.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.add_result.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InterNodeAck {
        InterNodeAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "ok",
                    |m: &InterNodeAck| { &m.ok },
                    |m: &mut InterNodeAck| { &mut m.ok },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err",
                    |m: &InterNodeAck| { &m.err },
                    |m: &mut InterNodeAck| { &mut m.err },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RemoveNodeResult>>(
                    "remove_result",
                    |m: &InterNodeAck| { &m.remove_result },
                    |m: &mut InterNodeAck| { &mut m.remove_result },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AddNodeResult>>(
                    "add_result",
                    |m: &InterNodeAck| { &m.add_result },
                    |m: &mut InterNodeAck| { &mut m.add_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InterNodeAck>(
                    "InterNodeAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InterNodeAck {
        static mut instance: ::protobuf::lazy::Lazy<InterNodeAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InterNodeAck,
        };
        unsafe {
            instance.get(InterNodeAck::new)
        }
    }
}

impl ::protobuf::Clear for InterNodeAck {
    fn clear(&mut self) {
        self.ok = ::std::option::Option::None;
        self.err.clear();
        self.remove_result.clear();
        self.add_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InterNodeAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InterNodeAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InterNodeMessage {
    // message fields
    message_type: ::std::option::Option<InterNodeMessage_MessageType>,
    payload: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InterNodeMessage {
    fn default() -> &'a InterNodeMessage {
        <InterNodeMessage as ::protobuf::Message>::default_instance()
    }
}

impl InterNodeMessage {
    pub fn new() -> InterNodeMessage {
        ::std::default::Default::default()
    }

    // optional .InterNodeMessage.MessageType message_type = 1;


    pub fn get_message_type(&self) -> InterNodeMessage_MessageType {
        self.message_type.unwrap_or(InterNodeMessage_MessageType::INTER_NODE_ACK)
    }
    pub fn clear_message_type(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_message_type(&self) -> bool {
        self.message_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message_type(&mut self, v: InterNodeMessage_MessageType) {
        self.message_type = ::std::option::Option::Some(v);
    }

    // optional bytes payload = 2;


    pub fn get_payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for InterNodeMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.message_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.message_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.message_type {
            os.write_enum(1, v.value())?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InterNodeMessage {
        InterNodeMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InterNodeMessage_MessageType>>(
                    "message_type",
                    |m: &InterNodeMessage| { &m.message_type },
                    |m: &mut InterNodeMessage| { &mut m.message_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &InterNodeMessage| { &m.payload },
                    |m: &mut InterNodeMessage| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InterNodeMessage>(
                    "InterNodeMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InterNodeMessage {
        static mut instance: ::protobuf::lazy::Lazy<InterNodeMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InterNodeMessage,
        };
        unsafe {
            instance.get(InterNodeMessage::new)
        }
    }
}

impl ::protobuf::Clear for InterNodeMessage {
    fn clear(&mut self) {
        self.message_type = ::std::option::Option::None;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InterNodeMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InterNodeMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum InterNodeMessage_MessageType {
    INTER_NODE_ACK = 0,
    VERIFY_REQUEST = 1,
    VERIFY_RESPONSE = 2,
    ADD_NODE_INIT = 3,
    ADD_NODE_TEST_RESULT = 4,
    ADD_NODE_RESULT = 5,
    NEW_NODE_TEST = 6,
    NEW_NODE_TEST_RESULT = 7,
    REMOVE_NODE_INIT = 8,
    REMOVE_NODE_TEST_RESULT = 9,
    REMOVE_NODE_RESULT = 10,
}

impl ::protobuf::ProtobufEnum for InterNodeMessage_MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InterNodeMessage_MessageType> {
        match value {
            0 => ::std::option::Option::Some(InterNodeMessage_MessageType::INTER_NODE_ACK),
            1 => ::std::option::Option::Some(InterNodeMessage_MessageType::VERIFY_REQUEST),
            2 => ::std::option::Option::Some(InterNodeMessage_MessageType::VERIFY_RESPONSE),
            3 => ::std::option::Option::Some(InterNodeMessage_MessageType::ADD_NODE_INIT),
            4 => ::std::option::Option::Some(InterNodeMessage_MessageType::ADD_NODE_TEST_RESULT),
            5 => ::std::option::Option::Some(InterNodeMessage_MessageType::ADD_NODE_RESULT),
            6 => ::std::option::Option::Some(InterNodeMessage_MessageType::NEW_NODE_TEST),
            7 => ::std::option::Option::Some(InterNodeMessage_MessageType::NEW_NODE_TEST_RESULT),
            8 => ::std::option::Option::Some(InterNodeMessage_MessageType::REMOVE_NODE_INIT),
            9 => ::std::option::Option::Some(InterNodeMessage_MessageType::REMOVE_NODE_TEST_RESULT),
            10 => ::std::option::Option::Some(InterNodeMessage_MessageType::REMOVE_NODE_RESULT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [InterNodeMessage_MessageType] = &[
            InterNodeMessage_MessageType::INTER_NODE_ACK,
            InterNodeMessage_MessageType::VERIFY_REQUEST,
            InterNodeMessage_MessageType::VERIFY_RESPONSE,
            InterNodeMessage_MessageType::ADD_NODE_INIT,
            InterNodeMessage_MessageType::ADD_NODE_TEST_RESULT,
            InterNodeMessage_MessageType::ADD_NODE_RESULT,
            InterNodeMessage_MessageType::NEW_NODE_TEST,
            InterNodeMessage_MessageType::NEW_NODE_TEST_RESULT,
            InterNodeMessage_MessageType::REMOVE_NODE_INIT,
            InterNodeMessage_MessageType::REMOVE_NODE_TEST_RESULT,
            InterNodeMessage_MessageType::REMOVE_NODE_RESULT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("InterNodeMessage_MessageType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for InterNodeMessage_MessageType {
}

impl ::std::default::Default for InterNodeMessage_MessageType {
    fn default() -> Self {
        InterNodeMessage_MessageType::INTER_NODE_ACK
    }
}

impl ::protobuf::reflect::ProtobufValue for InterNodeMessage_MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1asrc/proto/inter-node.proto\"/\n\tNodeLabel\x12\x10\n\x03len\x18\
    \x01\x20\x02(\rR\x03len\x12\x10\n\x03val\x18\x02\x20\x02(\x0cR\x03val\"<\
    \n\x04Node\x12\x20\n\x05label\x18\x01\x20\x01(\x0b2\n.NodeLabelR\x05labe\
    l\x12\x12\n\x04hash\x18\x02\x20\x01(\x0cR\x04hash\"Y\n\x0fAppendOnlyProo\
    f\x12!\n\x08inserted\x18\x01\x20\x03(\x0b2\x05.NodeR\x08inserted\x12#\n\
    \tunchanged\x18\x02\x20\x03(\x0b2\x05.NodeR\tunchanged\"@\n\x0bNodeConta\
    ct\x12\x1d\n\nip_address\x18\x01\x20\x01(\tR\tipAddress\x12\x12\n\x04por\
    t\x18\x02\x20\x01(\rR\x04port\"\x8d\x01\n\rVerifyRequest\x12&\n\x05proof\
    \x18\x01\x20\x01(\x0b2\x10.AppendOnlyProofR\x05proof\x12#\n\rprevious_ha\
    sh\x18\x02\x20\x01(\x0cR\x0cpreviousHash\x12\x19\n\x08new_hash\x18\x03\
    \x20\x01(\x0cR\x07newHash\x12\x14\n\x05epoch\x18\x04\x20\x01(\x04R\x05ep\
    och\"r\n\x0eVerifyResponse\x12;\n\x1aencrypted_quorum_key_shard\x18\x01\
    \x20\x01(\x0cR\x17encryptedQuorumKeyShard\x12#\n\rverified_hash\x18\x02\
    \x20\x01(\x0cR\x0cverifiedHash\"k\n\x0bAddNodeInit\x12\x1d\n\npublic_key\
    \x18\x01\x20\x01(\x0cR\tpublicKey\x12=\n\x13contact_information\x18\x02\
    \x20\x01(\x0b2\x0c.NodeContactR\x12contactInformation\"\x8f\x01\n\x11Add\
    NodeTestResult\x12;\n\x1aencrypted_quorum_key_shard\x18\x01\x20\x01(\x0c\
    R\x17encryptedQuorumKeyShard\x12=\n\x13contact_information\x18\x02\x20\
    \x01(\x0b2\x0c.NodeContactR\x12contactInformation\"\xc3\x01\n\rAddNodeRe\
    sult\x12;\n\x1aencrypted_quorum_key_shard\x18\x01\x20\x01(\x0cR\x17encry\
    ptedQuorumKeyShard\x12\x17\n\x07node_id\x18\x02\x20\x01(\x04R\x06nodeId\
    \x12\x1d\n\npublic_key\x18\x03\x20\x01(\x0cR\tpublicKey\x12=\n\x13contac\
    t_information\x18\x04\x20\x01(\x0b2\x0c.NodeContactR\x12contactInformati\
    on\"\xb2\x01\n\x0bNewNodeTest\x122\n\x15requesters_public_key\x18\x01\
    \x20\x01(\x0cR\x13requestersPublicKey\x12#\n\rprevious_hash\x18\x02\x20\
    \x01(\x0cR\x0cpreviousHash\x12\x19\n\x08new_hash\x18\x03\x20\x01(\x0cR\
    \x07newHash\x12/\n\ntest_proof\x18\x04\x20\x01(\x0b2\x10.AppendOnlyProof\
    R\ttestProof\"0\n\x11NewNodeTestResult\x12\x1b\n\ttest_pass\x18\x01\x20\
    \x01(\x08R\x08testPass\")\n\x0eRemoveNodeInit\x12\x17\n\x07node_id\x18\
    \x01\x20\x01(\x04R\x06nodeId\"l\n\x14RemoveNodeTestResult\x12;\n\x1aencr\
    ypted_quorum_key_shard\x18\x01\x20\x01(\x0cR\x17encryptedQuorumKeyShard\
    \x12\x17\n\x07node_id\x18\x02\x20\x01(\x04R\x06nodeId\"h\n\x10RemoveNode\
    Result\x12;\n\x1aencrypted_quorum_key_shard\x18\x01\x20\x01(\x0cR\x17enc\
    ryptedQuorumKeyShard\x12\x17\n\x07node_id\x18\x02\x20\x01(\x04R\x06nodeI\
    d\"\x97\x01\n\x0cInterNodeAck\x12\x0e\n\x02ok\x18\x01\x20\x01(\x08R\x02o\
    k\x12\x10\n\x03err\x18\x02\x20\x01(\tR\x03err\x126\n\rremove_result\x18\
    \x03\x20\x01(\x0b2\x11.RemoveNodeResultR\x0cremoveResult\x12-\n\nadd_res\
    ult\x18\x04\x20\x01(\x0b2\x0e.AddNodeResultR\taddResult\"\xf5\x02\n\x10I\
    nterNodeMessage\x12@\n\x0cmessage_type\x18\x01\x20\x01(\x0e2\x1d.InterNo\
    deMessage.MessageTypeR\x0bmessageType\x12\x18\n\x07payload\x18\x02\x20\
    \x01(\x0cR\x07payload\"\x84\x02\n\x0bMessageType\x12\x12\n\x0eINTER_NODE\
    _ACK\x10\0\x12\x12\n\x0eVERIFY_REQUEST\x10\x01\x12\x13\n\x0fVERIFY_RESPO\
    NSE\x10\x02\x12\x11\n\rADD_NODE_INIT\x10\x03\x12\x18\n\x14ADD_NODE_TEST_\
    RESULT\x10\x04\x12\x13\n\x0fADD_NODE_RESULT\x10\x05\x12\x11\n\rNEW_NODE_\
    TEST\x10\x06\x12\x18\n\x14NEW_NODE_TEST_RESULT\x10\x07\x12\x14\n\x10REMO\
    VE_NODE_INIT\x10\x08\x12\x1b\n\x17REMOVE_NODE_TEST_RESULT\x10\t\x12\x16\
    \n\x12REMOVE_NODE_RESULT\x10\n\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
