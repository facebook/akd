// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/proto/types.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct NodeLabel {
    // message fields
    label_val: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    label_len: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeLabel {
    fn default() -> &'a NodeLabel {
        <NodeLabel as ::protobuf::Message>::default_instance()
    }
}

impl NodeLabel {
    pub fn new() -> NodeLabel {
        ::std::default::Default::default()
    }

    // optional bytes label_val = 1;


    pub fn get_label_val(&self) -> &[u8] {
        match self.label_val.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_label_val(&mut self) {
        self.label_val.clear();
    }

    pub fn has_label_val(&self) -> bool {
        self.label_val.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label_val(&mut self, v: ::std::vec::Vec<u8>) {
        self.label_val = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label_val(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.label_val.is_none() {
            self.label_val.set_default();
        }
        self.label_val.as_mut().unwrap()
    }

    // Take field
    pub fn take_label_val(&mut self) -> ::std::vec::Vec<u8> {
        self.label_val.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 label_len = 2;


    pub fn get_label_len(&self) -> u32 {
        self.label_len.unwrap_or(0)
    }
    pub fn clear_label_len(&mut self) {
        self.label_len = ::std::option::Option::None;
    }

    pub fn has_label_len(&self) -> bool {
        self.label_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label_len(&mut self, v: u32) {
        self.label_len = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for NodeLabel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.label_val)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.label_len = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.label_val.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.label_len {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.label_val.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.label_len {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeLabel {
        NodeLabel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "label_val",
                    |m: &NodeLabel| { &m.label_val },
                    |m: &mut NodeLabel| { &mut m.label_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "label_len",
                    |m: &NodeLabel| { &m.label_len },
                    |m: &mut NodeLabel| { &mut m.label_len },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NodeLabel>(
                    "NodeLabel",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeLabel {
        static mut instance: ::protobuf::lazy::Lazy<NodeLabel> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeLabel,
        };
        unsafe {
            instance.get(NodeLabel::new)
        }
    }
}

impl ::protobuf::Clear for NodeLabel {
    fn clear(&mut self) {
        self.label_val.clear();
        self.label_len = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeLabel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeLabel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Node {
    // message fields
    label: ::protobuf::SingularPtrField<NodeLabel>,
    hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node {
    fn default() -> &'a Node {
        <Node as ::protobuf::Message>::default_instance()
    }
}

impl Node {
    pub fn new() -> Node {
        ::std::default::Default::default()
    }

    // optional .NodeLabel label = 1;


    pub fn get_label(&self) -> &NodeLabel {
        self.label.as_ref().unwrap_or_else(|| NodeLabel::default_instance())
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: NodeLabel) {
        self.label = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut NodeLabel {
        if self.label.is_none() {
            self.label.set_default();
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> NodeLabel {
        self.label.take().unwrap_or_else(|| NodeLabel::new())
    }

    // optional bytes hash = 2;


    pub fn get_hash(&self) -> &[u8] {
        match self.hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    pub fn has_hash(&self) -> bool {
        self.hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.hash.is_none() {
            self.hash.set_default();
        }
        self.hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Node {
    fn is_initialized(&self) -> bool {
        for v in &self.label {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.label.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.label.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node {
        Node::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeLabel>>(
                    "label",
                    |m: &Node| { &m.label },
                    |m: &mut Node| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &Node| { &m.hash },
                    |m: &mut Node| { &mut m.hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Node>(
                    "Node",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Node {
        static mut instance: ::protobuf::lazy::Lazy<Node> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Node,
        };
        unsafe {
            instance.get(Node::new)
        }
    }
}

impl ::protobuf::Clear for Node {
    fn clear(&mut self) {
        self.label.clear();
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LayerProof {
    // message fields
    label: ::protobuf::SingularPtrField<NodeLabel>,
    siblings: ::protobuf::RepeatedField<Node>,
    direction: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LayerProof {
    fn default() -> &'a LayerProof {
        <LayerProof as ::protobuf::Message>::default_instance()
    }
}

impl LayerProof {
    pub fn new() -> LayerProof {
        ::std::default::Default::default()
    }

    // optional .NodeLabel label = 1;


    pub fn get_label(&self) -> &NodeLabel {
        self.label.as_ref().unwrap_or_else(|| NodeLabel::default_instance())
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: NodeLabel) {
        self.label = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut NodeLabel {
        if self.label.is_none() {
            self.label.set_default();
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> NodeLabel {
        self.label.take().unwrap_or_else(|| NodeLabel::new())
    }

    // repeated .Node siblings = 2;


    pub fn get_siblings(&self) -> &[Node] {
        &self.siblings
    }
    pub fn clear_siblings(&mut self) {
        self.siblings.clear();
    }

    // Param is passed by value, moved
    pub fn set_siblings(&mut self, v: ::protobuf::RepeatedField<Node>) {
        self.siblings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_siblings(&mut self) -> &mut ::protobuf::RepeatedField<Node> {
        &mut self.siblings
    }

    // Take field
    pub fn take_siblings(&mut self) -> ::protobuf::RepeatedField<Node> {
        ::std::mem::replace(&mut self.siblings, ::protobuf::RepeatedField::new())
    }

    // optional uint32 direction = 3;


    pub fn get_direction(&self) -> u32 {
        self.direction.unwrap_or(0)
    }
    pub fn clear_direction(&mut self) {
        self.direction = ::std::option::Option::None;
    }

    pub fn has_direction(&self) -> bool {
        self.direction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_direction(&mut self, v: u32) {
        self.direction = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for LayerProof {
    fn is_initialized(&self) -> bool {
        for v in &self.label {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.siblings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.siblings)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.direction = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.label.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.siblings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.direction {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.label.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.siblings {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.direction {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LayerProof {
        LayerProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeLabel>>(
                    "label",
                    |m: &LayerProof| { &m.label },
                    |m: &mut LayerProof| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                    "siblings",
                    |m: &LayerProof| { &m.siblings },
                    |m: &mut LayerProof| { &mut m.siblings },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "direction",
                    |m: &LayerProof| { &m.direction },
                    |m: &mut LayerProof| { &mut m.direction },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LayerProof>(
                    "LayerProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LayerProof {
        static mut instance: ::protobuf::lazy::Lazy<LayerProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LayerProof,
        };
        unsafe {
            instance.get(LayerProof::new)
        }
    }
}

impl ::protobuf::Clear for LayerProof {
    fn clear(&mut self) {
        self.label.clear();
        self.siblings.clear();
        self.direction = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LayerProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LayerProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MembershipProof {
    // message fields
    label: ::protobuf::SingularPtrField<NodeLabel>,
    hash_val: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    layer_proofs: ::protobuf::RepeatedField<LayerProof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MembershipProof {
    fn default() -> &'a MembershipProof {
        <MembershipProof as ::protobuf::Message>::default_instance()
    }
}

impl MembershipProof {
    pub fn new() -> MembershipProof {
        ::std::default::Default::default()
    }

    // optional .NodeLabel label = 1;


    pub fn get_label(&self) -> &NodeLabel {
        self.label.as_ref().unwrap_or_else(|| NodeLabel::default_instance())
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: NodeLabel) {
        self.label = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut NodeLabel {
        if self.label.is_none() {
            self.label.set_default();
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> NodeLabel {
        self.label.take().unwrap_or_else(|| NodeLabel::new())
    }

    // optional bytes hash_val = 2;


    pub fn get_hash_val(&self) -> &[u8] {
        match self.hash_val.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_hash_val(&mut self) {
        self.hash_val.clear();
    }

    pub fn has_hash_val(&self) -> bool {
        self.hash_val.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hash_val(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash_val = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash_val(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.hash_val.is_none() {
            self.hash_val.set_default();
        }
        self.hash_val.as_mut().unwrap()
    }

    // Take field
    pub fn take_hash_val(&mut self) -> ::std::vec::Vec<u8> {
        self.hash_val.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // repeated .LayerProof layer_proofs = 3;


    pub fn get_layer_proofs(&self) -> &[LayerProof] {
        &self.layer_proofs
    }
    pub fn clear_layer_proofs(&mut self) {
        self.layer_proofs.clear();
    }

    // Param is passed by value, moved
    pub fn set_layer_proofs(&mut self, v: ::protobuf::RepeatedField<LayerProof>) {
        self.layer_proofs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_layer_proofs(&mut self) -> &mut ::protobuf::RepeatedField<LayerProof> {
        &mut self.layer_proofs
    }

    // Take field
    pub fn take_layer_proofs(&mut self) -> ::protobuf::RepeatedField<LayerProof> {
        ::std::mem::replace(&mut self.layer_proofs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MembershipProof {
    fn is_initialized(&self) -> bool {
        for v in &self.label {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.layer_proofs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.hash_val)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.layer_proofs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.label.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.hash_val.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        for value in &self.layer_proofs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.label.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.hash_val.as_ref() {
            os.write_bytes(2, &v)?;
        }
        for v in &self.layer_proofs {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MembershipProof {
        MembershipProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeLabel>>(
                    "label",
                    |m: &MembershipProof| { &m.label },
                    |m: &mut MembershipProof| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash_val",
                    |m: &MembershipProof| { &m.hash_val },
                    |m: &mut MembershipProof| { &mut m.hash_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LayerProof>>(
                    "layer_proofs",
                    |m: &MembershipProof| { &m.layer_proofs },
                    |m: &mut MembershipProof| { &mut m.layer_proofs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MembershipProof>(
                    "MembershipProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MembershipProof {
        static mut instance: ::protobuf::lazy::Lazy<MembershipProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MembershipProof,
        };
        unsafe {
            instance.get(MembershipProof::new)
        }
    }
}

impl ::protobuf::Clear for MembershipProof {
    fn clear(&mut self) {
        self.label.clear();
        self.hash_val.clear();
        self.layer_proofs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MembershipProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MembershipProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NonMembershipProof {
    // message fields
    label: ::protobuf::SingularPtrField<NodeLabel>,
    longest_prefix: ::protobuf::SingularPtrField<NodeLabel>,
    longest_prefix_children: ::protobuf::RepeatedField<Node>,
    longest_prefix_membership_proof: ::protobuf::SingularPtrField<MembershipProof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NonMembershipProof {
    fn default() -> &'a NonMembershipProof {
        <NonMembershipProof as ::protobuf::Message>::default_instance()
    }
}

impl NonMembershipProof {
    pub fn new() -> NonMembershipProof {
        ::std::default::Default::default()
    }

    // optional .NodeLabel label = 1;


    pub fn get_label(&self) -> &NodeLabel {
        self.label.as_ref().unwrap_or_else(|| NodeLabel::default_instance())
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: NodeLabel) {
        self.label = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut NodeLabel {
        if self.label.is_none() {
            self.label.set_default();
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> NodeLabel {
        self.label.take().unwrap_or_else(|| NodeLabel::new())
    }

    // optional .NodeLabel longest_prefix = 2;


    pub fn get_longest_prefix(&self) -> &NodeLabel {
        self.longest_prefix.as_ref().unwrap_or_else(|| NodeLabel::default_instance())
    }
    pub fn clear_longest_prefix(&mut self) {
        self.longest_prefix.clear();
    }

    pub fn has_longest_prefix(&self) -> bool {
        self.longest_prefix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_longest_prefix(&mut self, v: NodeLabel) {
        self.longest_prefix = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_longest_prefix(&mut self) -> &mut NodeLabel {
        if self.longest_prefix.is_none() {
            self.longest_prefix.set_default();
        }
        self.longest_prefix.as_mut().unwrap()
    }

    // Take field
    pub fn take_longest_prefix(&mut self) -> NodeLabel {
        self.longest_prefix.take().unwrap_or_else(|| NodeLabel::new())
    }

    // repeated .Node longest_prefix_children = 3;


    pub fn get_longest_prefix_children(&self) -> &[Node] {
        &self.longest_prefix_children
    }
    pub fn clear_longest_prefix_children(&mut self) {
        self.longest_prefix_children.clear();
    }

    // Param is passed by value, moved
    pub fn set_longest_prefix_children(&mut self, v: ::protobuf::RepeatedField<Node>) {
        self.longest_prefix_children = v;
    }

    // Mutable pointer to the field.
    pub fn mut_longest_prefix_children(&mut self) -> &mut ::protobuf::RepeatedField<Node> {
        &mut self.longest_prefix_children
    }

    // Take field
    pub fn take_longest_prefix_children(&mut self) -> ::protobuf::RepeatedField<Node> {
        ::std::mem::replace(&mut self.longest_prefix_children, ::protobuf::RepeatedField::new())
    }

    // optional .MembershipProof longest_prefix_membership_proof = 4;


    pub fn get_longest_prefix_membership_proof(&self) -> &MembershipProof {
        self.longest_prefix_membership_proof.as_ref().unwrap_or_else(|| MembershipProof::default_instance())
    }
    pub fn clear_longest_prefix_membership_proof(&mut self) {
        self.longest_prefix_membership_proof.clear();
    }

    pub fn has_longest_prefix_membership_proof(&self) -> bool {
        self.longest_prefix_membership_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_longest_prefix_membership_proof(&mut self, v: MembershipProof) {
        self.longest_prefix_membership_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_longest_prefix_membership_proof(&mut self) -> &mut MembershipProof {
        if self.longest_prefix_membership_proof.is_none() {
            self.longest_prefix_membership_proof.set_default();
        }
        self.longest_prefix_membership_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_longest_prefix_membership_proof(&mut self) -> MembershipProof {
        self.longest_prefix_membership_proof.take().unwrap_or_else(|| MembershipProof::new())
    }
}

impl ::protobuf::Message for NonMembershipProof {
    fn is_initialized(&self) -> bool {
        for v in &self.label {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.longest_prefix {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.longest_prefix_children {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.longest_prefix_membership_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.longest_prefix)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.longest_prefix_children)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.longest_prefix_membership_proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.label.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.longest_prefix.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.longest_prefix_children {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.longest_prefix_membership_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.label.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.longest_prefix.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.longest_prefix_children {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.longest_prefix_membership_proof.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NonMembershipProof {
        NonMembershipProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeLabel>>(
                    "label",
                    |m: &NonMembershipProof| { &m.label },
                    |m: &mut NonMembershipProof| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeLabel>>(
                    "longest_prefix",
                    |m: &NonMembershipProof| { &m.longest_prefix },
                    |m: &mut NonMembershipProof| { &mut m.longest_prefix },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                    "longest_prefix_children",
                    |m: &NonMembershipProof| { &m.longest_prefix_children },
                    |m: &mut NonMembershipProof| { &mut m.longest_prefix_children },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MembershipProof>>(
                    "longest_prefix_membership_proof",
                    |m: &NonMembershipProof| { &m.longest_prefix_membership_proof },
                    |m: &mut NonMembershipProof| { &mut m.longest_prefix_membership_proof },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NonMembershipProof>(
                    "NonMembershipProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NonMembershipProof {
        static mut instance: ::protobuf::lazy::Lazy<NonMembershipProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NonMembershipProof,
        };
        unsafe {
            instance.get(NonMembershipProof::new)
        }
    }
}

impl ::protobuf::Clear for NonMembershipProof {
    fn clear(&mut self) {
        self.label.clear();
        self.longest_prefix.clear();
        self.longest_prefix_children.clear();
        self.longest_prefix_membership_proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NonMembershipProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NonMembershipProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LookupProof {
    // message fields
    epoch: ::std::option::Option<u64>,
    plaintext_value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    version: ::std::option::Option<u64>,
    existence_vrf_proof: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    existence_proof: ::protobuf::SingularPtrField<MembershipProof>,
    marker_vrf_proof: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    marker_proof: ::protobuf::SingularPtrField<MembershipProof>,
    freshness_vrf_proof: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    freshness_proof: ::protobuf::SingularPtrField<NonMembershipProof>,
    commitment_proof: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LookupProof {
    fn default() -> &'a LookupProof {
        <LookupProof as ::protobuf::Message>::default_instance()
    }
}

impl LookupProof {
    pub fn new() -> LookupProof {
        ::std::default::Default::default()
    }

    // optional uint64 epoch = 1;


    pub fn get_epoch(&self) -> u64 {
        self.epoch.unwrap_or(0)
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = ::std::option::Option::None;
    }

    pub fn has_epoch(&self) -> bool {
        self.epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = ::std::option::Option::Some(v);
    }

    // optional bytes plaintext_value = 2;


    pub fn get_plaintext_value(&self) -> &[u8] {
        match self.plaintext_value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_plaintext_value(&mut self) {
        self.plaintext_value.clear();
    }

    pub fn has_plaintext_value(&self) -> bool {
        self.plaintext_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plaintext_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.plaintext_value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plaintext_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.plaintext_value.is_none() {
            self.plaintext_value.set_default();
        }
        self.plaintext_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_plaintext_value(&mut self) -> ::std::vec::Vec<u8> {
        self.plaintext_value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 version = 3;


    pub fn get_version(&self) -> u64 {
        self.version.unwrap_or(0)
    }
    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u64) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional bytes existence_vrf_proof = 4;


    pub fn get_existence_vrf_proof(&self) -> &[u8] {
        match self.existence_vrf_proof.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_existence_vrf_proof(&mut self) {
        self.existence_vrf_proof.clear();
    }

    pub fn has_existence_vrf_proof(&self) -> bool {
        self.existence_vrf_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_existence_vrf_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.existence_vrf_proof = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_existence_vrf_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.existence_vrf_proof.is_none() {
            self.existence_vrf_proof.set_default();
        }
        self.existence_vrf_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_existence_vrf_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.existence_vrf_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .MembershipProof existence_proof = 5;


    pub fn get_existence_proof(&self) -> &MembershipProof {
        self.existence_proof.as_ref().unwrap_or_else(|| MembershipProof::default_instance())
    }
    pub fn clear_existence_proof(&mut self) {
        self.existence_proof.clear();
    }

    pub fn has_existence_proof(&self) -> bool {
        self.existence_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_existence_proof(&mut self, v: MembershipProof) {
        self.existence_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_existence_proof(&mut self) -> &mut MembershipProof {
        if self.existence_proof.is_none() {
            self.existence_proof.set_default();
        }
        self.existence_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_existence_proof(&mut self) -> MembershipProof {
        self.existence_proof.take().unwrap_or_else(|| MembershipProof::new())
    }

    // optional bytes marker_vrf_proof = 6;


    pub fn get_marker_vrf_proof(&self) -> &[u8] {
        match self.marker_vrf_proof.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_marker_vrf_proof(&mut self) {
        self.marker_vrf_proof.clear();
    }

    pub fn has_marker_vrf_proof(&self) -> bool {
        self.marker_vrf_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_marker_vrf_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.marker_vrf_proof = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_marker_vrf_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.marker_vrf_proof.is_none() {
            self.marker_vrf_proof.set_default();
        }
        self.marker_vrf_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_marker_vrf_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.marker_vrf_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .MembershipProof marker_proof = 7;


    pub fn get_marker_proof(&self) -> &MembershipProof {
        self.marker_proof.as_ref().unwrap_or_else(|| MembershipProof::default_instance())
    }
    pub fn clear_marker_proof(&mut self) {
        self.marker_proof.clear();
    }

    pub fn has_marker_proof(&self) -> bool {
        self.marker_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_marker_proof(&mut self, v: MembershipProof) {
        self.marker_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_marker_proof(&mut self) -> &mut MembershipProof {
        if self.marker_proof.is_none() {
            self.marker_proof.set_default();
        }
        self.marker_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_marker_proof(&mut self) -> MembershipProof {
        self.marker_proof.take().unwrap_or_else(|| MembershipProof::new())
    }

    // optional bytes freshness_vrf_proof = 8;


    pub fn get_freshness_vrf_proof(&self) -> &[u8] {
        match self.freshness_vrf_proof.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_freshness_vrf_proof(&mut self) {
        self.freshness_vrf_proof.clear();
    }

    pub fn has_freshness_vrf_proof(&self) -> bool {
        self.freshness_vrf_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_freshness_vrf_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.freshness_vrf_proof = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_freshness_vrf_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.freshness_vrf_proof.is_none() {
            self.freshness_vrf_proof.set_default();
        }
        self.freshness_vrf_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_freshness_vrf_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.freshness_vrf_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .NonMembershipProof freshness_proof = 9;


    pub fn get_freshness_proof(&self) -> &NonMembershipProof {
        self.freshness_proof.as_ref().unwrap_or_else(|| NonMembershipProof::default_instance())
    }
    pub fn clear_freshness_proof(&mut self) {
        self.freshness_proof.clear();
    }

    pub fn has_freshness_proof(&self) -> bool {
        self.freshness_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_freshness_proof(&mut self, v: NonMembershipProof) {
        self.freshness_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_freshness_proof(&mut self) -> &mut NonMembershipProof {
        if self.freshness_proof.is_none() {
            self.freshness_proof.set_default();
        }
        self.freshness_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_freshness_proof(&mut self) -> NonMembershipProof {
        self.freshness_proof.take().unwrap_or_else(|| NonMembershipProof::new())
    }

    // optional bytes commitment_proof = 10;


    pub fn get_commitment_proof(&self) -> &[u8] {
        match self.commitment_proof.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_commitment_proof(&mut self) {
        self.commitment_proof.clear();
    }

    pub fn has_commitment_proof(&self) -> bool {
        self.commitment_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commitment_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.commitment_proof = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commitment_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.commitment_proof.is_none() {
            self.commitment_proof.set_default();
        }
        self.commitment_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_commitment_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.commitment_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LookupProof {
    fn is_initialized(&self) -> bool {
        for v in &self.existence_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.marker_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.freshness_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.plaintext_value)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.version = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.existence_vrf_proof)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.existence_proof)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.marker_vrf_proof)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.marker_proof)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.freshness_vrf_proof)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.freshness_proof)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.commitment_proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.epoch {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.plaintext_value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.existence_vrf_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(ref v) = self.existence_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.marker_vrf_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(ref v) = self.marker_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.freshness_vrf_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        }
        if let Some(ref v) = self.freshness_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.commitment_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(10, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.epoch {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.plaintext_value.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.version {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.existence_vrf_proof.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(ref v) = self.existence_proof.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.marker_vrf_proof.as_ref() {
            os.write_bytes(6, &v)?;
        }
        if let Some(ref v) = self.marker_proof.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.freshness_vrf_proof.as_ref() {
            os.write_bytes(8, &v)?;
        }
        if let Some(ref v) = self.freshness_proof.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.commitment_proof.as_ref() {
            os.write_bytes(10, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LookupProof {
        LookupProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "epoch",
                    |m: &LookupProof| { &m.epoch },
                    |m: &mut LookupProof| { &mut m.epoch },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "plaintext_value",
                    |m: &LookupProof| { &m.plaintext_value },
                    |m: &mut LookupProof| { &mut m.plaintext_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "version",
                    |m: &LookupProof| { &m.version },
                    |m: &mut LookupProof| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "existence_vrf_proof",
                    |m: &LookupProof| { &m.existence_vrf_proof },
                    |m: &mut LookupProof| { &mut m.existence_vrf_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MembershipProof>>(
                    "existence_proof",
                    |m: &LookupProof| { &m.existence_proof },
                    |m: &mut LookupProof| { &mut m.existence_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "marker_vrf_proof",
                    |m: &LookupProof| { &m.marker_vrf_proof },
                    |m: &mut LookupProof| { &mut m.marker_vrf_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MembershipProof>>(
                    "marker_proof",
                    |m: &LookupProof| { &m.marker_proof },
                    |m: &mut LookupProof| { &mut m.marker_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "freshness_vrf_proof",
                    |m: &LookupProof| { &m.freshness_vrf_proof },
                    |m: &mut LookupProof| { &mut m.freshness_vrf_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NonMembershipProof>>(
                    "freshness_proof",
                    |m: &LookupProof| { &m.freshness_proof },
                    |m: &mut LookupProof| { &mut m.freshness_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "commitment_proof",
                    |m: &LookupProof| { &m.commitment_proof },
                    |m: &mut LookupProof| { &mut m.commitment_proof },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LookupProof>(
                    "LookupProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LookupProof {
        static mut instance: ::protobuf::lazy::Lazy<LookupProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LookupProof,
        };
        unsafe {
            instance.get(LookupProof::new)
        }
    }
}

impl ::protobuf::Clear for LookupProof {
    fn clear(&mut self) {
        self.epoch = ::std::option::Option::None;
        self.plaintext_value.clear();
        self.version = ::std::option::Option::None;
        self.existence_vrf_proof.clear();
        self.existence_proof.clear();
        self.marker_vrf_proof.clear();
        self.marker_proof.clear();
        self.freshness_vrf_proof.clear();
        self.freshness_proof.clear();
        self.commitment_proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LookupProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LookupProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateProof {
    // message fields
    epoch: ::std::option::Option<u64>,
    plaintext_value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    version: ::std::option::Option<u64>,
    existence_vrf_proof: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    existence_at_ep: ::protobuf::SingularPtrField<MembershipProof>,
    previous_version_vrf_proof: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    previous_version_stale_at_ep: ::protobuf::SingularPtrField<MembershipProof>,
    commitment_proof: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateProof {
    fn default() -> &'a UpdateProof {
        <UpdateProof as ::protobuf::Message>::default_instance()
    }
}

impl UpdateProof {
    pub fn new() -> UpdateProof {
        ::std::default::Default::default()
    }

    // optional uint64 epoch = 1;


    pub fn get_epoch(&self) -> u64 {
        self.epoch.unwrap_or(0)
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = ::std::option::Option::None;
    }

    pub fn has_epoch(&self) -> bool {
        self.epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = ::std::option::Option::Some(v);
    }

    // optional bytes plaintext_value = 2;


    pub fn get_plaintext_value(&self) -> &[u8] {
        match self.plaintext_value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_plaintext_value(&mut self) {
        self.plaintext_value.clear();
    }

    pub fn has_plaintext_value(&self) -> bool {
        self.plaintext_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plaintext_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.plaintext_value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plaintext_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.plaintext_value.is_none() {
            self.plaintext_value.set_default();
        }
        self.plaintext_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_plaintext_value(&mut self) -> ::std::vec::Vec<u8> {
        self.plaintext_value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 version = 3;


    pub fn get_version(&self) -> u64 {
        self.version.unwrap_or(0)
    }
    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u64) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional bytes existence_vrf_proof = 4;


    pub fn get_existence_vrf_proof(&self) -> &[u8] {
        match self.existence_vrf_proof.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_existence_vrf_proof(&mut self) {
        self.existence_vrf_proof.clear();
    }

    pub fn has_existence_vrf_proof(&self) -> bool {
        self.existence_vrf_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_existence_vrf_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.existence_vrf_proof = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_existence_vrf_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.existence_vrf_proof.is_none() {
            self.existence_vrf_proof.set_default();
        }
        self.existence_vrf_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_existence_vrf_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.existence_vrf_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .MembershipProof existence_at_ep = 5;


    pub fn get_existence_at_ep(&self) -> &MembershipProof {
        self.existence_at_ep.as_ref().unwrap_or_else(|| MembershipProof::default_instance())
    }
    pub fn clear_existence_at_ep(&mut self) {
        self.existence_at_ep.clear();
    }

    pub fn has_existence_at_ep(&self) -> bool {
        self.existence_at_ep.is_some()
    }

    // Param is passed by value, moved
    pub fn set_existence_at_ep(&mut self, v: MembershipProof) {
        self.existence_at_ep = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_existence_at_ep(&mut self) -> &mut MembershipProof {
        if self.existence_at_ep.is_none() {
            self.existence_at_ep.set_default();
        }
        self.existence_at_ep.as_mut().unwrap()
    }

    // Take field
    pub fn take_existence_at_ep(&mut self) -> MembershipProof {
        self.existence_at_ep.take().unwrap_or_else(|| MembershipProof::new())
    }

    // optional bytes previous_version_vrf_proof = 6;


    pub fn get_previous_version_vrf_proof(&self) -> &[u8] {
        match self.previous_version_vrf_proof.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_previous_version_vrf_proof(&mut self) {
        self.previous_version_vrf_proof.clear();
    }

    pub fn has_previous_version_vrf_proof(&self) -> bool {
        self.previous_version_vrf_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_previous_version_vrf_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.previous_version_vrf_proof = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_version_vrf_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.previous_version_vrf_proof.is_none() {
            self.previous_version_vrf_proof.set_default();
        }
        self.previous_version_vrf_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_previous_version_vrf_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.previous_version_vrf_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .MembershipProof previous_version_stale_at_ep = 7;


    pub fn get_previous_version_stale_at_ep(&self) -> &MembershipProof {
        self.previous_version_stale_at_ep.as_ref().unwrap_or_else(|| MembershipProof::default_instance())
    }
    pub fn clear_previous_version_stale_at_ep(&mut self) {
        self.previous_version_stale_at_ep.clear();
    }

    pub fn has_previous_version_stale_at_ep(&self) -> bool {
        self.previous_version_stale_at_ep.is_some()
    }

    // Param is passed by value, moved
    pub fn set_previous_version_stale_at_ep(&mut self, v: MembershipProof) {
        self.previous_version_stale_at_ep = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_version_stale_at_ep(&mut self) -> &mut MembershipProof {
        if self.previous_version_stale_at_ep.is_none() {
            self.previous_version_stale_at_ep.set_default();
        }
        self.previous_version_stale_at_ep.as_mut().unwrap()
    }

    // Take field
    pub fn take_previous_version_stale_at_ep(&mut self) -> MembershipProof {
        self.previous_version_stale_at_ep.take().unwrap_or_else(|| MembershipProof::new())
    }

    // optional bytes commitment_proof = 8;


    pub fn get_commitment_proof(&self) -> &[u8] {
        match self.commitment_proof.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_commitment_proof(&mut self) {
        self.commitment_proof.clear();
    }

    pub fn has_commitment_proof(&self) -> bool {
        self.commitment_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commitment_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.commitment_proof = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commitment_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.commitment_proof.is_none() {
            self.commitment_proof.set_default();
        }
        self.commitment_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_commitment_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.commitment_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for UpdateProof {
    fn is_initialized(&self) -> bool {
        for v in &self.existence_at_ep {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.previous_version_stale_at_ep {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.plaintext_value)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.version = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.existence_vrf_proof)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.existence_at_ep)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.previous_version_vrf_proof)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.previous_version_stale_at_ep)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.commitment_proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.epoch {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.plaintext_value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.existence_vrf_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(ref v) = self.existence_at_ep.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.previous_version_vrf_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(ref v) = self.previous_version_stale_at_ep.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.commitment_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.epoch {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.plaintext_value.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.version {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.existence_vrf_proof.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(ref v) = self.existence_at_ep.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.previous_version_vrf_proof.as_ref() {
            os.write_bytes(6, &v)?;
        }
        if let Some(ref v) = self.previous_version_stale_at_ep.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.commitment_proof.as_ref() {
            os.write_bytes(8, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateProof {
        UpdateProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "epoch",
                    |m: &UpdateProof| { &m.epoch },
                    |m: &mut UpdateProof| { &mut m.epoch },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "plaintext_value",
                    |m: &UpdateProof| { &m.plaintext_value },
                    |m: &mut UpdateProof| { &mut m.plaintext_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "version",
                    |m: &UpdateProof| { &m.version },
                    |m: &mut UpdateProof| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "existence_vrf_proof",
                    |m: &UpdateProof| { &m.existence_vrf_proof },
                    |m: &mut UpdateProof| { &mut m.existence_vrf_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MembershipProof>>(
                    "existence_at_ep",
                    |m: &UpdateProof| { &m.existence_at_ep },
                    |m: &mut UpdateProof| { &mut m.existence_at_ep },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "previous_version_vrf_proof",
                    |m: &UpdateProof| { &m.previous_version_vrf_proof },
                    |m: &mut UpdateProof| { &mut m.previous_version_vrf_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MembershipProof>>(
                    "previous_version_stale_at_ep",
                    |m: &UpdateProof| { &m.previous_version_stale_at_ep },
                    |m: &mut UpdateProof| { &mut m.previous_version_stale_at_ep },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "commitment_proof",
                    |m: &UpdateProof| { &m.commitment_proof },
                    |m: &mut UpdateProof| { &mut m.commitment_proof },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateProof>(
                    "UpdateProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateProof {
        static mut instance: ::protobuf::lazy::Lazy<UpdateProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateProof,
        };
        unsafe {
            instance.get(UpdateProof::new)
        }
    }
}

impl ::protobuf::Clear for UpdateProof {
    fn clear(&mut self) {
        self.epoch = ::std::option::Option::None;
        self.plaintext_value.clear();
        self.version = ::std::option::Option::None;
        self.existence_vrf_proof.clear();
        self.existence_at_ep.clear();
        self.previous_version_vrf_proof.clear();
        self.previous_version_stale_at_ep.clear();
        self.commitment_proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HistoryProof {
    // message fields
    update_proofs: ::protobuf::RepeatedField<UpdateProof>,
    next_few_vrf_proofs: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    non_existence_of_next_few: ::protobuf::RepeatedField<NonMembershipProof>,
    future_marker_vrf_proofs: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    non_existence_of_future_markers: ::protobuf::RepeatedField<NonMembershipProof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HistoryProof {
    fn default() -> &'a HistoryProof {
        <HistoryProof as ::protobuf::Message>::default_instance()
    }
}

impl HistoryProof {
    pub fn new() -> HistoryProof {
        ::std::default::Default::default()
    }

    // repeated .UpdateProof update_proofs = 1;


    pub fn get_update_proofs(&self) -> &[UpdateProof] {
        &self.update_proofs
    }
    pub fn clear_update_proofs(&mut self) {
        self.update_proofs.clear();
    }

    // Param is passed by value, moved
    pub fn set_update_proofs(&mut self, v: ::protobuf::RepeatedField<UpdateProof>) {
        self.update_proofs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_update_proofs(&mut self) -> &mut ::protobuf::RepeatedField<UpdateProof> {
        &mut self.update_proofs
    }

    // Take field
    pub fn take_update_proofs(&mut self) -> ::protobuf::RepeatedField<UpdateProof> {
        ::std::mem::replace(&mut self.update_proofs, ::protobuf::RepeatedField::new())
    }

    // repeated bytes next_few_vrf_proofs = 2;


    pub fn get_next_few_vrf_proofs(&self) -> &[::std::vec::Vec<u8>] {
        &self.next_few_vrf_proofs
    }
    pub fn clear_next_few_vrf_proofs(&mut self) {
        self.next_few_vrf_proofs.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_few_vrf_proofs(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.next_few_vrf_proofs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_next_few_vrf_proofs(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.next_few_vrf_proofs
    }

    // Take field
    pub fn take_next_few_vrf_proofs(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.next_few_vrf_proofs, ::protobuf::RepeatedField::new())
    }

    // repeated .NonMembershipProof non_existence_of_next_few = 3;


    pub fn get_non_existence_of_next_few(&self) -> &[NonMembershipProof] {
        &self.non_existence_of_next_few
    }
    pub fn clear_non_existence_of_next_few(&mut self) {
        self.non_existence_of_next_few.clear();
    }

    // Param is passed by value, moved
    pub fn set_non_existence_of_next_few(&mut self, v: ::protobuf::RepeatedField<NonMembershipProof>) {
        self.non_existence_of_next_few = v;
    }

    // Mutable pointer to the field.
    pub fn mut_non_existence_of_next_few(&mut self) -> &mut ::protobuf::RepeatedField<NonMembershipProof> {
        &mut self.non_existence_of_next_few
    }

    // Take field
    pub fn take_non_existence_of_next_few(&mut self) -> ::protobuf::RepeatedField<NonMembershipProof> {
        ::std::mem::replace(&mut self.non_existence_of_next_few, ::protobuf::RepeatedField::new())
    }

    // repeated bytes future_marker_vrf_proofs = 4;


    pub fn get_future_marker_vrf_proofs(&self) -> &[::std::vec::Vec<u8>] {
        &self.future_marker_vrf_proofs
    }
    pub fn clear_future_marker_vrf_proofs(&mut self) {
        self.future_marker_vrf_proofs.clear();
    }

    // Param is passed by value, moved
    pub fn set_future_marker_vrf_proofs(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.future_marker_vrf_proofs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_future_marker_vrf_proofs(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.future_marker_vrf_proofs
    }

    // Take field
    pub fn take_future_marker_vrf_proofs(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.future_marker_vrf_proofs, ::protobuf::RepeatedField::new())
    }

    // repeated .NonMembershipProof non_existence_of_future_markers = 5;


    pub fn get_non_existence_of_future_markers(&self) -> &[NonMembershipProof] {
        &self.non_existence_of_future_markers
    }
    pub fn clear_non_existence_of_future_markers(&mut self) {
        self.non_existence_of_future_markers.clear();
    }

    // Param is passed by value, moved
    pub fn set_non_existence_of_future_markers(&mut self, v: ::protobuf::RepeatedField<NonMembershipProof>) {
        self.non_existence_of_future_markers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_non_existence_of_future_markers(&mut self) -> &mut ::protobuf::RepeatedField<NonMembershipProof> {
        &mut self.non_existence_of_future_markers
    }

    // Take field
    pub fn take_non_existence_of_future_markers(&mut self) -> ::protobuf::RepeatedField<NonMembershipProof> {
        ::std::mem::replace(&mut self.non_existence_of_future_markers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HistoryProof {
    fn is_initialized(&self) -> bool {
        for v in &self.update_proofs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.non_existence_of_next_few {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.non_existence_of_future_markers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.update_proofs)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.next_few_vrf_proofs)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.non_existence_of_next_few)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.future_marker_vrf_proofs)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.non_existence_of_future_markers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.update_proofs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.next_few_vrf_proofs {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.non_existence_of_next_few {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.future_marker_vrf_proofs {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        for value in &self.non_existence_of_future_markers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.update_proofs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.next_few_vrf_proofs {
            os.write_bytes(2, &v)?;
        };
        for v in &self.non_existence_of_next_few {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.future_marker_vrf_proofs {
            os.write_bytes(4, &v)?;
        };
        for v in &self.non_existence_of_future_markers {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HistoryProof {
        HistoryProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpdateProof>>(
                    "update_proofs",
                    |m: &HistoryProof| { &m.update_proofs },
                    |m: &mut HistoryProof| { &mut m.update_proofs },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "next_few_vrf_proofs",
                    |m: &HistoryProof| { &m.next_few_vrf_proofs },
                    |m: &mut HistoryProof| { &mut m.next_few_vrf_proofs },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NonMembershipProof>>(
                    "non_existence_of_next_few",
                    |m: &HistoryProof| { &m.non_existence_of_next_few },
                    |m: &mut HistoryProof| { &mut m.non_existence_of_next_few },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "future_marker_vrf_proofs",
                    |m: &HistoryProof| { &m.future_marker_vrf_proofs },
                    |m: &mut HistoryProof| { &mut m.future_marker_vrf_proofs },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NonMembershipProof>>(
                    "non_existence_of_future_markers",
                    |m: &HistoryProof| { &m.non_existence_of_future_markers },
                    |m: &mut HistoryProof| { &mut m.non_existence_of_future_markers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HistoryProof>(
                    "HistoryProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HistoryProof {
        static mut instance: ::protobuf::lazy::Lazy<HistoryProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HistoryProof,
        };
        unsafe {
            instance.get(HistoryProof::new)
        }
    }
}

impl ::protobuf::Clear for HistoryProof {
    fn clear(&mut self) {
        self.update_proofs.clear();
        self.next_few_vrf_proofs.clear();
        self.non_existence_of_next_few.clear();
        self.future_marker_vrf_proofs.clear();
        self.non_existence_of_future_markers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HistoryProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HistoryProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15src/proto/types.proto\"E\n\tNodeLabel\x12\x1b\n\tlabel_val\x18\x01\
    \x20\x01(\x0cR\x08labelVal\x12\x1b\n\tlabel_len\x18\x02\x20\x01(\rR\x08l\
    abelLen\"<\n\x04Node\x12\x20\n\x05label\x18\x01\x20\x01(\x0b2\n.NodeLabe\
    lR\x05label\x12\x12\n\x04hash\x18\x02\x20\x01(\x0cR\x04hash\"o\n\nLayerP\
    roof\x12\x20\n\x05label\x18\x01\x20\x01(\x0b2\n.NodeLabelR\x05label\x12!\
    \n\x08siblings\x18\x02\x20\x03(\x0b2\x05.NodeR\x08siblings\x12\x1c\n\tdi\
    rection\x18\x03\x20\x01(\rR\tdirection\"~\n\x0fMembershipProof\x12\x20\n\
    \x05label\x18\x01\x20\x01(\x0b2\n.NodeLabelR\x05label\x12\x19\n\x08hash_\
    val\x18\x02\x20\x01(\x0cR\x07hashVal\x12.\n\x0clayer_proofs\x18\x03\x20\
    \x03(\x0b2\x0b.LayerProofR\x0blayerProofs\"\x81\x02\n\x12NonMembershipPr\
    oof\x12\x20\n\x05label\x18\x01\x20\x01(\x0b2\n.NodeLabelR\x05label\x121\
    \n\x0elongest_prefix\x18\x02\x20\x01(\x0b2\n.NodeLabelR\rlongestPrefix\
    \x12=\n\x17longest_prefix_children\x18\x03\x20\x03(\x0b2\x05.NodeR\x15lo\
    ngestPrefixChildren\x12W\n\x1flongest_prefix_membership_proof\x18\x04\
    \x20\x01(\x0b2\x10.MembershipProofR\x1clongestPrefixMembershipProof\"\
    \xc9\x03\n\x0bLookupProof\x12\x14\n\x05epoch\x18\x01\x20\x01(\x04R\x05ep\
    och\x12'\n\x0fplaintext_value\x18\x02\x20\x01(\x0cR\x0eplaintextValue\
    \x12\x18\n\x07version\x18\x03\x20\x01(\x04R\x07version\x12.\n\x13existen\
    ce_vrf_proof\x18\x04\x20\x01(\x0cR\x11existenceVrfProof\x129\n\x0fexiste\
    nce_proof\x18\x05\x20\x01(\x0b2\x10.MembershipProofR\x0eexistenceProof\
    \x12(\n\x10marker_vrf_proof\x18\x06\x20\x01(\x0cR\x0emarkerVrfProof\x123\
    \n\x0cmarker_proof\x18\x07\x20\x01(\x0b2\x10.MembershipProofR\x0bmarkerP\
    roof\x12.\n\x13freshness_vrf_proof\x18\x08\x20\x01(\x0cR\x11freshnessVrf\
    Proof\x12<\n\x0ffreshness_proof\x18\t\x20\x01(\x0b2\x13.NonMembershipPro\
    ofR\x0efreshnessProof\x12)\n\x10commitment_proof\x18\n\x20\x01(\x0cR\x0f\
    commitmentProof\"\x8a\x03\n\x0bUpdateProof\x12\x14\n\x05epoch\x18\x01\
    \x20\x01(\x04R\x05epoch\x12'\n\x0fplaintext_value\x18\x02\x20\x01(\x0cR\
    \x0eplaintextValue\x12\x18\n\x07version\x18\x03\x20\x01(\x04R\x07version\
    \x12.\n\x13existence_vrf_proof\x18\x04\x20\x01(\x0cR\x11existenceVrfProo\
    f\x128\n\x0fexistence_at_ep\x18\x05\x20\x01(\x0b2\x10.MembershipProofR\r\
    existenceAtEp\x12;\n\x1aprevious_version_vrf_proof\x18\x06\x20\x01(\x0cR\
    \x17previousVersionVrfProof\x12P\n\x1cprevious_version_stale_at_ep\x18\
    \x07\x20\x01(\x0b2\x10.MembershipProofR\x18previousVersionStaleAtEp\x12)\
    \n\x10commitment_proof\x18\x08\x20\x01(\x0cR\x0fcommitmentProof\"\xd3\
    \x02\n\x0cHistoryProof\x121\n\rupdate_proofs\x18\x01\x20\x03(\x0b2\x0c.U\
    pdateProofR\x0cupdateProofs\x12-\n\x13next_few_vrf_proofs\x18\x02\x20\
    \x03(\x0cR\x10nextFewVrfProofs\x12M\n\x19non_existence_of_next_few\x18\
    \x03\x20\x03(\x0b2\x13.NonMembershipProofR\x15nonExistenceOfNextFew\x127\
    \n\x18future_marker_vrf_proofs\x18\x04\x20\x03(\x0cR\x15futureMarkerVrfP\
    roofs\x12Y\n\x1fnon_existence_of_future_markers\x18\x05\x20\x03(\x0b2\
    \x13.NonMembershipProofR\x1bnonExistenceOfFutureMarkers\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
