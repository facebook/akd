// Copyright (c) Meta Platforms, Inc. and affiliates.
//
// This source code is dual-licensed under either the MIT license found in the
// LICENSE-MIT file in the root directory of this source tree or the Apache
// License, Version 2.0 found in the LICENSE-APACHE file in the root directory
// of this source tree. You may select, at your option, one of the above-listed licenses.

// This contains the protobuf definition for inter-node messaging structures

// To re-generate the protobuf specifications, utilize the build.rs script in this
// crate (See Cargo.toml file)

syntax = "proto2";

/* NodeLabel represents the label of a history tree node in the AKD tree with a
 * supplied label-length and label value (location) */
message NodeLabel {
    optional bytes label_val = 1;
    optional uint32 label_len = 2;
}

/* Element of an AZKS wihich contains a label and value */
message AzksElement {
    optional NodeLabel label = 1;
    optional bytes value = 2;
}

/* Represents a specific level of the tree with the parental sibling and the direction
of the parent for use in tree hash calculations */
message SiblingProof {
    optional NodeLabel label = 1;
    repeated AzksElement siblings = 2;
    optional uint32 direction = 3;
}

/* Merkle proof of membership of a [`NodeLabel`] with a particular hash
value in the tree at a given epoch */
message MembershipProof {
    optional NodeLabel label = 1;
    optional bytes hash_val = 2;
    repeated SiblingProof sibling_proofs = 3;
}

/* Merkle Patricia proof of non-membership for a [`NodeLabel`] in the tree
at a given epoch. */
message NonMembershipProof {
    optional NodeLabel label = 1;
    optional NodeLabel longest_prefix = 2;
    repeated AzksElement longest_prefix_children = 3;
    optional MembershipProof longest_prefix_membership_proof = 4;
}

/* Proof that a given label was at a particular state at the given epoch.
This means we need to show that the state and version we are claiming for this node must have been:
* committed in the tree,
* not too far ahead of the most recent marker version,
* not stale when served.
This proof is sent in response to a lookup query for a particular key. */
message LookupProof {
    optional uint64 epoch = 1;
    optional bytes value = 2;
    optional uint64 version = 3;
    optional bytes existence_vrf_proof = 4;
    optional MembershipProof existence_proof = 5;
    optional bytes marker_vrf_proof = 6;
    optional MembershipProof marker_proof = 7;
    optional bytes freshness_vrf_proof = 8;
    optional NonMembershipProof freshness_proof = 9;
    optional bytes commitment_nonce = 10;
}

/* A vector of UpdateProofs are sent as the proof to a history query for a particular key.
For each version of the value associated with the key, the verifier must check that:
* the version was included in the claimed epoch,
* the previous version was retired at this epoch,
* the version did not exist prior to this epoch,
* the next few versions (up until the next marker), did not exist at this epoch,
* the future marker versions did  not exist at this epoch. */
message UpdateProof {
    optional uint64 epoch = 1;
    optional bytes value = 2;
    optional uint64 version = 3;
    optional bytes existence_vrf_proof = 4;
    optional MembershipProof existence_proof = 5;
    optional bytes previous_version_vrf_proof = 6;
    optional MembershipProof previous_version_proof = 7;
    optional bytes commitment_nonce = 8;
}

/* This proof consists of an array of [`UpdateProof`]s, non-membership proofs for 
the versions up until the next marker, and then non-membership proofs for future markers
up until the current epoch. */
message HistoryProof {
    repeated UpdateProof update_proofs = 1;
    repeated bytes until_marker_vrf_proofs = 2;
    repeated NonMembershipProof non_existence_until_marker_proofs = 3;
    repeated bytes future_marker_vrf_proofs = 4;
    repeated NonMembershipProof non_existence_of_future_marker_proofs = 5;
}

/* SingleEncodedProof represents a proof that no leaves were changed or removed between epoch t and t + 1 */
message SingleAppendOnlyProof {
    repeated AzksElement inserted = 1;
    repeated AzksElement unchanged_nodes = 2;
}

/* An append-only proof is a proof that no nodes were changes from epochs[0] to epochs[end], epoch-by-epoch */
message AppendOnlyProof {
    repeated SingleAppendOnlyProof proofs = 1;
    repeated uint64 epochs = 2;
}